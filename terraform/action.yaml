name: Terraform Run New
description: Runs a Terraform Plan or Apply against an AWS account, supports access key authentication and tfmigrate state migrations
inputs:
  aws_access_key_id:
    description: 'AWS Access Key ID for authentication'
    required: true
  aws_secret_access_key:
    description: 'AWS Secret Access Key for authentication'
    required: true
  aws_region:
    description: 'AWS Region to perform Terraform plan'
    required: true
  terraform_action:
    description: 'Terraform action to perform, options are "plan" and "apply"'
    default: 'plan'
    required: true
  terraform_version:
    description: 'Terraform Version'
    required: true
  terraform_state_bucket:
    description: 'The AWS S3 bucket containing the TF state file'
    required: false
  terraform_state_key:
    description: 'The key/path for the state file within the S3 bucket'
    required: false
  terraform_state_region:
    description: 'The AWS region for the S3 state bucket'
    required: false
  terraform_working_dir:
    description: 'The Terraform Directory to run in'
    required: true
  variables:
    description: 'Comma-separated list of variables to export as TF_VAR_ environment variables'
    required: false
  tfmigrate_enabled:
    description: 'Enable tfmigrate state migration support'
    default: 'false'
    required: false
  tfmigrate_version:
    description: 'tfmigrate version to install'
    default: 'latest'
    required: false
  tfmigrate_file:
    description: 'Path to the tfmigrate HCL file for state migrations'
    required: false
  tfmigrate_action:
    description: 'tfmigrate action to perform: "plan" or "apply"'
    default: 'plan'
    required: false

outputs:
  terraform_plan_exitcode:
    description: "Exit code from terraform plan"
    value: ${{ steps.plan.outputs.exitcode }}
  terraform_apply_output:
    description: "Everything output by Terraform apply"
    value: ${{ steps.output.outputs.tf_output_json }}
  has_changes:
    description: "Whether changes are needed to the plan"
    value: ${{ steps.plan.outputs.has_changes }}
  tfmigrate_plan_output:
    description: "Output from tfmigrate plan"
    value: ${{ steps.tfmigrate_plan.outputs.plan_output }}
  tfmigrate_apply_output:
    description: "Output from tfmigrate apply"
    value: ${{ steps.tfmigrate_apply.outputs.apply_output }}

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws_region }}
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}

    - name: "setup-terraform"
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: "Install tfmigrate"
      if: ${{ inputs.tfmigrate_enabled == 'true' }}
      shell: bash
      run: |
        if [ "${{ inputs.tfmigrate_version }}" = "latest" ]; then
          TFMIGRATE_VERSION=$(curl -s https://api.github.com/repos/minamijoyo/tfmigrate/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
        else
          TFMIGRATE_VERSION="${{ inputs.tfmigrate_version }}"
        fi
        
        echo "Installing tfmigrate version: $TFMIGRATE_VERSION"
        
        # Determine architecture
        ARCH=$(uname -m)
        case $ARCH in
          x86_64) ARCH="amd64" ;;
          aarch64) ARCH="arm64" ;;
          armv7l) ARCH="arm" ;;
        esac
        
        # Download and install tfmigrate
        curl -LO "https://github.com/minamijoyo/tfmigrate/releases/download/v${TFMIGRATE_VERSION}/tfmigrate_${TFMIGRATE_VERSION}_linux_${ARCH}.tar.gz"
        tar -xzf "tfmigrate_${TFMIGRATE_VERSION}_linux_${ARCH}.tar.gz"
        sudo mv tfmigrate /usr/local/bin/
        chmod +x /usr/local/bin/tfmigrate
        
        # Verify installation
        tfmigrate version

    - name: "Terraform Backend Config"
      id: backend
      if: ${{ inputs.terraform_state_bucket != '' || inputs.terraform_state_key != '' || inputs.terraform_state_region != '' }}
      working-directory: ${{ inputs.terraform_working_dir }}
      shell: bash
      run: |
        cat > backend.conf << EOF
        $([ -n "${{ inputs.terraform_state_bucket }}" ] && echo 'bucket="${{ inputs.terraform_state_bucket }}"')
        $([ -n "${{ inputs.terraform_state_key }}" ] && echo 'key="${{ inputs.terraform_state_key }}"')
        $([ -n "${{ inputs.terraform_state_region }}" ] && echo 'region="${{ inputs.terraform_state_region }}"')
        EOF

    - name: "Terraform Init"
      id: init
      working-directory: ${{ inputs.terraform_working_dir }}
      shell: bash
      run: |
        if [ "${{ inputs.terraform_state_bucket }}" != "" ] || [ "${{ inputs.terraform_state_key }}" != "" ] || [ "${{ inputs.terraform_state_region }}" != "" ]; then
          terraform init -input=false -backend-config=./backend.conf
        else
          terraform init -input=false
        fi

    - name: "Terraform Validate"
      id: validate
      working-directory: ${{ inputs.terraform_working_dir }}
      shell: bash
      if: ${{ inputs.terraform_action == 'plan' }}
      run: terraform validate -no-color

    - name: "tfmigrate Plan"
      id: tfmigrate_plan
      working-directory: ${{ inputs.terraform_working_dir }}
      shell: bash
      if: ${{ inputs.tfmigrate_enabled == 'true' && inputs.tfmigrate_file != '' && inputs.tfmigrate_action == 'plan' }}
      run: |
        echo "Running tfmigrate plan on ${{ inputs.tfmigrate_file }}"
        PLAN_OUTPUT=$(tfmigrate plan ${{ inputs.tfmigrate_file }} 2>&1)
        echo "plan_output<<EOF" >> $GITHUB_OUTPUT
        echo "$PLAN_OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "$PLAN_OUTPUT"

    - name: "tfmigrate Apply"
      id: tfmigrate_apply
      working-directory: ${{ inputs.terraform_working_dir }}
      shell: bash
      if: ${{ inputs.tfmigrate_enabled == 'true' && inputs.tfmigrate_file != '' && inputs.tfmigrate_action == 'apply' }}
      run: |
        echo "Running tfmigrate apply on ${{ inputs.tfmigrate_file }}"
        APPLY_OUTPUT=$(tfmigrate apply ${{ inputs.tfmigrate_file }} 2>&1)
        echo "apply_output<<EOF" >> $GITHUB_OUTPUT
        echo "$APPLY_OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "$APPLY_OUTPUT"

    - name: "Terraform Plan"
      id: plan
      working-directory: ${{ inputs.terraform_working_dir }}
      shell: bash
      if: ${{ inputs.terraform_action == 'plan' }}
      run: |
        # Initialize change detection
        change_detected=0

        # Export TF_VAR_ variables if they exist:
        if [ "${{ inputs.variables }}" != "" ]; then
          # split variables on a comma, remove spaces and prepend TF_VAR_ if needed then export them to the env:
          IFS=',' read -ra VARS <<< "${{ inputs.variables }}"
          for var in "${VARS[@]}"; do
            # Remove leading/trailing whitespace
            var=$(echo "$var" | xargs)
            # Add TF_VAR_ prefix if not already present
            if [[ "$var" != TF_VAR_* ]]; then
              var="TF_VAR_$var"
            fi
            # Export the variable (assuming format is KEY=VALUE)
            export "$var"
            echo "Exported: $var"
          done
        fi

        # Install jq if not available
        if ! command -v jq &> /dev/null; then
          echo "jq not found, installing..."
          sudo apt-get update && sudo apt-get install -y jq
        fi

        # Generate the plan file
        terraform plan -input=false -out=tfplan

        # Now check if the plan has changes (separate step to avoid issues with output capture)
        echo "Running terraform show to check for changes..."

        PLAN_OUTPUT=$(terraform show -json tfplan | jq 'if .resource_changes then .resource_changes[].change.actions[0] else empty end')

        for item in $PLAN_OUTPUT; do
          if [ "$item" != '"no-op"' ]; then
            change_detected=1
          fi
        done

        # Check if we found any actions besides "no-op"
        if [ $change_detected -eq 1 ]; then
            echo "Changes detected in the terraform plan"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "exitcode=2" >> $GITHUB_OUTPUT
        else
            echo "No changes detected in the terraform plan"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "exitcode=0" >> $GITHUB_OUTPUT
        fi

    - name: "Terraform Apply"
      id: apply
      working-directory: ${{ inputs.terraform_working_dir }}
      shell: bash
      if: ${{ inputs.terraform_action == 'apply' }}
      run: |
        # Export TF_VAR_ variables if they exist:
        if [ "${{ inputs.variables }}" != "" ]; then
          # split variables on a comma, remove spaces and prepend TF_VAR_ if needed then export them to the env:
          IFS=',' read -ra VARS <<< "${{ inputs.variables }}"
          for var in "${VARS[@]}"; do
            # Remove leading/trailing whitespace
            var=$(echo "$var" | xargs)
            # Add TF_VAR_ prefix if not already present
            if [[ "$var" != TF_VAR_* ]]; then
              var="TF_VAR_$var"
            fi
            # Export the variable (assuming format is KEY=VALUE)
            export "$var"
            echo "Exported: $var"
          done
        fi
        
        terraform apply -input=false -auto-approve

    - name: "Terraform Output"
      id: output
      working-directory: ${{ inputs.terraform_working_dir }}
      shell: bash
      if: ${{ inputs.terraform_action == 'apply' }}
      run: |
        # `terraform-bin` because: https://stackoverflow.com/questions/69925970/how-to-save-terraform-output-variable-into-a-github-action-s-environment-variabl
        echo "tf_output_json=$(terraform-bin output -json -no-color | jq -c)" >> $GITHUB_OUTPUT
